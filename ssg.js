const fs = require('fs');
const path = require('path');
const https = require('https');

// Load configuration
const config = JSON.parse(fs.readFileSync('config.json', 'utf8'));

// Ensure output directory exists
if (!fs.existsSync(config.outputDir)) {
  fs.mkdirSync(config.outputDir, { recursive: true });
}

// Load templates
const templates = {
  base: fs.readFileSync(path.join('themes', config.template, 'baseof.html'), 'utf8'),
  single: fs.readFileSync(path.join('themes', config.template, 'single.html'), 'utf8'),
  list: fs.readFileSync(path.join('themes', config.template, 'list.html'), 'utf8')
};

// Helper function to fetch JSON data
async function fetchData(url) {
  return new Promise((resolve, reject) => {
    https.get(url, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => resolve(JSON.parse(data)));
    }).on('error', reject);
  });
}

// Generate HTML from template and data using template literals
function generateHTML(templateName, data, outputPath) {
  let content;
  
  if (templateName === 'single') {
    content = generateSinglePage(data);
  } else if (templateName === 'list') {
    content = generateListPage(data);
  }
  
  const fullHTML = generateBasePage({ ...data, content });
  
  fs.writeFileSync(outputPath, fullHTML);
  console.log(`Generated: ${outputPath}`);
}

// Template generators using JavaScript template literals
function generateBasePage(data) {
  return `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${data.title || ''} | Visual Novel Database</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      line-height: 1.6;
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
      color: #333;
    }
    img {
      max-width: 100%;
      height: auto;
    }
    .item {
      margin-bottom: 30px;
      border-bottom: 1px solid #eee;
      padding-bottom: 20px;
    }
    .item-list {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
      gap: 20px;
    }
  </style>
</head>
<body>
  <header>
    <h1>Visual Novel Database</h1>
  </header>
  <main>
    ${data.content || ''}
  </main>
  <footer>
    <p>Generated by Simple SSG</p>
  </footer>
</body>
</html>
  `;
}

function generateListPage(data) {
  const items = data.items || [];
  return `
<h2>Visual Novels</h2>
<div class="item-list">
  ${items.map(item => `
  <div class="item-card">
    <a href="${item.id}.html">
      ${item.image?.url ? `<img src="${item.image.url}" alt="${item.title}">` : ''}
      <h3>${item.title || 'Untitled'}</h3>
    </a>
    ${item.developers?.length ? `
    <p><strong>Developers:</strong> 
      ${item.developers.map(dev => dev.name).join(', ')}
    </p>
    ` : ''}
  </div>
  `).join('')}
</div>
  `;
}

function generateSinglePage(data) {
  return `
<article class="item">
  <h2>${data.title || 'Untitled'}</h2>
  ${data.image?.url ? `<img src="${data.image.url}" alt="${data.title}">` : ''}
  
  <div class="details">
    ${data.developers?.length ? `
    <p><strong>Developers:</strong> 
      ${data.developers.map(dev => dev.name).join(', ')}
    </p>
    ` : ''}
    
    ${data.description ? `
    <div class="description">
      <h3>Description</h3>
      <p>${data.description}</p>
    </div>
    ` : ''}
  </div>
</article>
  `;
}

// Main generation function
async function generateSite() {
  try {
    // Load all data sources
    const allItems = [];
    
    for (const dataUrl of config.data) {
      const data = await fetchData(dataUrl);
      if (Array.isArray(data)) {
        allItems.push(...data);
      } else {
        allItems.push(data);
      }
    }
    
    // Generate individual pages
    for (const item of allItems) {
      const outputPath = path.join(config.outputDir, `${item.id}.html`);
      generateHTML('single', item, outputPath);
    }
    
    // Generate list page
    const listOutputPath = path.join(config.outputDir, 'index.html');
    generateHTML('list', { items: allItems }, listOutputPath);
    
    console.log('Site generation complete!');
  } catch (error) {
    console.error('Error generating site:', error);
  }
}

// Run the generator
generateSite();
